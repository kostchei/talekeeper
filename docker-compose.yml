# Docker Compose for TaleKeeper D&D Game

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: dnd_database
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./database/seed_data.sql:/docker-entrypoint-initdb.d/02-seed.sql
    ports:
      - "5432:5432"
    networks:
      - dnd_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Backend
  backend:
    build: ./backend
    container_name: dnd_backend
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      PYTHONUNBUFFERED: 1
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - dnd_network
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    restart: unless-stopped

  # React Frontend
  frontend:
    build: ./frontend
    container_name: dnd_frontend
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL}
    volumes:
      - ./frontend:/app
      - /app/node_modules  # Prevent node_modules from being overwritten
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - dnd_network
    command: npm start
    restart: unless-stopped

  # Adminer for database management (optional, useful for development)
  adminer:
    image: adminer:latest
    container_name: dnd_adminer
    ports:
      - "8080:8080"
    networks:
      - dnd_network
    depends_on:
      - db
    restart: unless-stopped

networks:
  dnd_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local